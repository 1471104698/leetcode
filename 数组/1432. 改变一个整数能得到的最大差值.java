给你一个整数 num 。你可以对它进行如下步骤恰好 两次 ：

选择一个数字 x (0 <= x <= 9).
选择另一个数字 y (0 <= y <= 9) 。数字 y 可以等于 x 。
将 num 中所有出现 x 的数位都用 y 替换。
得到的新的整数 不能 有前导 0 ，得到的新整数也 不能 是 0 。
令两次对 num 的操作得到的结果分别为 a 和 b 。

请你返回 a 和 b 的 最大差值 。

 

示例 1：
输入：num = 555
输出：888
解释：第一次选择 x = 5 且 y = 9 ，并把得到的新数字保存在 a 中。
第二次选择 x = 5 且 y = 1 ，并把得到的新数字保存在 b 中。
现在，我们有 a = 999 和 b = 111 ，最大差值为 888

示例 2：
输入：num = 9
输出：8
解释：第一次选择 x = 9 且 y = 9 ，并把得到的新数字保存在 a 中。
第二次选择 x = 9 且 y = 1 ，并把得到的新数字保存在 b 中。
现在，我们有 a = 9 和 b = 1 ，最大差值为 8

示例 3：
输入：num = 111
输出：888
解释：最小值为 111，而不是 000 也不是 100，最大值为 999，因此结果为 999 - 111 = 888

class Solution {
    public int maxDiff(int num) {
        /*  

            要求：得到的新的整数 不能 有前导 0 ，得到的新整数也 不能 是 0 ，即数字不能是 0 开头

            我们尽可能的找到高位的值进行改变，因为改变一个高位比改变后面的低位对最终值造成的影响更大

            最小值：从头开始找，如果是首位那么判断是否比 1 大，如果比 1 大那么改为 1，
                            否则顺序找后面比 0 大并且不为 1 的数，将整个数组中等于该数的位置改为 0 即可
                            (
                                为什么不为 1？ 因为如果我们后面找的值为 1，那么首位为 1 的也需要改为 0，那么就会出现前导 0 的情况
                                比如 111
                                我们第一位为 1 ，不管跳过，第二位为 1，那么如果改为 0，那么第一位也是为 1，需要改为 0，导致结果变为 000，这是错误的
                            }
            最大值：从头开始找，找到第一个比 9 小的数，将整个数组中等于该数的位置都改为 9
        */

        String str = String.valueOf(num);
        int len = str.length();
        char[] min = str.toCharArray();
        char[] max = str.toCharArray();

        //获取最小值，对首位情况，单独处理
        //如果大于 1 ，那么直接变为 1 即可
        if(min[0] > '1'){
            int temp = min[0];
            for(int j = 0; j < len; j++){
                if(min[j] == temp){
                    min[j] = '1';
                }
            }
        }else{  //如果等于 1，那么找后面的值
            for(int i = 1; i < len; i++){
                if(min[i] > '0' && min[i] != '1'){
                    int temp = min[i];
                    for(int j = i; j < len; j++){
                        if(min[j] == temp){
                            min[j] = '0';
                        }
                    }
                    break;
                }
            }
        }

        //获取最大值，直接寻找小于 9 的数改为 9 即可
        for(int i = 0; i < len; i++){
            if(max[i] < '9'){
                int temp = max[i];
                for(int j = i; j < len; j++){
                    if(max[j] == temp){
                        max[j] = '9';
                    }
                }
                break;
            }
        }
        return Integer.parseInt(new String(max)) - Integer.parseInt(new String(min));
    }
}