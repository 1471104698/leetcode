给定一个有 N 个结点的二叉树的根结点 root，树中的每个结点上都对应有 node.val 枚硬币，并且总共有 N 枚硬币。

在一次移动中，我们可以选择两个相邻的结点，然后将一枚硬币从其中一个结点移动到另一个结点。(移动可以是从父结点到子结点，或者从子结点移动到父结点。)。

返回使每个结点上只有一枚硬币所需的移动次数。

 

示例 1：



输入：[3,0,0]
输出：2
解释：从树的根结点开始，我们将一枚硬币移到它的左子结点上，一枚硬币移到它的右子结点上。
示例 2：



输入：[0,3,0]
输出：3
解释：从根结点的左子结点开始，我们将两枚硬币移到根结点上 [移动两次]。然后，我们把一枚硬币从根结点移到右子结点上。


class Solution {
    //记录移动的步数
    int sum = 0;
    public int distributeCoins(TreeNode root) {
        /*
            1
        4       0
    0               0
        当子树无论是存在多余的硬币还是缺少硬币，都需要经过父节点，即由父节点来进行分配
        对于多余的硬币，就是将多余的硬币从子节点一个个搬到父节点
        对于缺少的硬币，就是将需要的硬币从付姐带你一个个搬到子节点

        对于上述的两个情况，都可以看作是子节点都父节点的路径 * 多余（缺少）的硬币个数

        当子树处理完成后，子树多余的硬币需要给父节点，让父节点给另一边

        使用后序遍历，这样左右子树处理完成，将硬币情况返回给父节点，父节点才能进行分配
        */
        dfs(root);
        return sum;
    }
    //返回结果为多余（缺少）的硬币数
    private int dfs(TreeNode root){
        if(root == null){
            return 0;
        }
        //左右子树的硬币情况：正数表示多余硬币，负数表示缺少硬币
        int left = dfs(root.left);
        int right = dfs(root.right);

        /*
        左子树和右子树的硬币情况综合到当前节点，由当前节点进行分配
        此处计算的是当前节点解决掉左右子树的匹配情况所需的步数
        */
        sum += Math.abs(left) + Math.abs(right);

        /*
        当前硬币数 + 左子树 多余（缺少）的硬币数 + 右子树 多余（缺少）的硬币数 - 1（-1 表示留给自己的一个硬币）
        将到此节点为止的硬币情况返回给父节点，然后由父节点对当前节点的 多余（缺少）的硬币进行分配
        */
        return root.val + left + right - 1;
    }
}