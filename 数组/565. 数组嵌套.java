
索引从0开始长度为N的数组A，包含0到N - 1的所有整数。找到并返回最大的集合S，S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }且遵守以下的规则。

假设选择索引为i的元素A[i]为S的第一个元素，S的下一个元素应该是A[A[i]]，之后是A[A[A[i]]]... 以此类推，不断添加直到S出现重复的元素。

示例 1:

输入: A = [5,4,0,3,1,6,2]
输出: 4
解释: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

其中一种最长的 S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
注意:

N是[1, 20,000]之间的整数。
A中不含有重复的元素。
A中的元素大小在[0, N-1]之间。

class Solution {
    public int arrayNesting(int[] nums) {
        /*
        比如 A = [5,4,0,3,1,6,2]
        S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
        我们可以发现 ，循环一直是 0 5 6 2 0 5 6 2 ...
        那么这意味着这个循环只包含 0 5 6 2，那么意味着其他元素不会包含在这个环中，那么我们可以将遍历过的元素设置为 -1，当遇到 -1 的时候，表示重新到达环首
        */
        int len = nums.length;
        int maxLen = -1;
        for(int i = 0; i < len; i++){
            //如果当前值为 -1，表示当前位置是属于之前已经遍历过的环的一部分
            if(nums[i] == -1){
                continue;
            }
            //记录个数
            int c = 0;
            int j = i;
            while(nums[j] != -1){
                int temp = nums[j];
                //将当前索引位置设置为 -1
                nums[j] = -1;
                c++;
                j = temp;
            }
            maxLen = Math.max(c, maxLen);
        }
        return maxLen;
    }
}