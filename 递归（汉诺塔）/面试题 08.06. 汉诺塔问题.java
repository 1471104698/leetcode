在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:
(1) 每次只能移动一个盘子;
(2) 盘子只能从柱子顶端滑出移到下一根柱子;
(3) 盘子只能叠在比它大的盘子上。

请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。

你需要原地修改栈。

示例1:

 输入：A = [2, 1, 0], B = [], C = []
 输出：C = [2, 1, 0]
示例2:

 输入：A = [1, 0], B = [], C = []
 输出：C = [1, 0]
提示:

A中盘子的数目不大于14个。

class Solution {
    public void hanota(List<Integer> A, List<Integer> B, List<Integer> C) {
        /*
        1、当 A 只有一个盘子，那么直接移到 C 上即可
        2、当 A 有多个盘子，那么将第 N 个上面的 N - 1 个盘子都递归的移到 B 上，然后将最后一个盘子移到 C 上
            然后将 B 作为 A，将 B 上面的盘子移动到 C 上
        */
        if (A.size() == 0) {
            return;
        }
        helper(A.size(), A, B, C);
    }

    private void helper(int N, List<Integer> A, List<Integer> B, List<Integer> C) {
        if (N == 1) {
            //这里可能是递归进来的，一直递归到对 1 个盘子进行操作，而这一个盘子就是最上面的盘子，索引位置是 A.szie() - 1 而不是 0
            C.add(A.remove(A.size() - 1));
        } else {
            //将 A 除最后一个盘子外上面的 N - 1 个盘子都移到 B
            helper(N - 1, A, C, B);
            //将 A 最后一个盘子给 C
            /*
            同上，可能是递归进来的，对于 N 个盘子来说，这可能是对 N - 1 个盘子进行操作，
            那么经过上面的 helper() ，上面的 N - 2 个盘子都被移到 B 了，那么我们此时此时移动的是这第 N - 1 个盘子到 C 
            即最上面的盘子（因为前面的已经被移到 B 了） 索引位置为 A.size() - 1，而不是 0
            */
            C.add(A.remove(A.size() - 1));
            //将 B 上 N - 1 个的盘子移到 C
            helper(N - 1, B, A, C);
        }
    }
}