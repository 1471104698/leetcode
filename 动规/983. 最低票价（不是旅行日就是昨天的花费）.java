
在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。

火车票有三种不同的销售方式：

一张为期一天的通行证售价为 costs[0] 美元；
一张为期七天的通行证售价为 costs[1] 美元；
一张为期三十天的通行证售价为 costs[2] 美元。
通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。

返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。

示例 1：

输入：days = [1,4,6,7,8,20], costs = [2,7,15]
输出：11
解释： 
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
你总共花了 $11，并完成了你计划的每一天旅行。

示例 2：
输入：days = [1,4,6,7,8,20], costs = [[7,2,15]
//注意：这里的 周票比 日票便宜

class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        /*
        使用数组 dp 记录到当天为止，是买 1 天的 还是 7 天的 还是 30 天的划算
        min(dp[cur_day - 1] + costs[0], dp[cur_day - 7] + costs[1], dp[cur_day - 30] + costs[2])
        */
        int[] dp = new int[366];
        int len = days.length;

        //记录下一个旅行日的索引位置
        int idx = 0;
        for(int day = 1; day <= days[len - 1]; day++){
            //今天不是旅行日，那么花费就是昨天的花费
            if(day != days[idx]){
                dp[day] = dp[day - 1];
                continue;
            }
            //如果一个月前买了月票，那么一个月到今天都不需要买票，那么花费就是一月前一天的花费加上月票钱
            //如果一周前买了周票，那么一周前到今天都不需要买票，那么花费就是一周前一天的花费加上周票钱
            //直接买日票，昨天的花费加上日票钱
            dp[day] = dp[day - 1] + costs[0];
            /*
            if(day >= 7){
                dp[day] = Math.min(dp[day - 7] + costs[1], dp[day]);
            }
            if(day >= 30) {
                dp[day] = Math.min(dp[day - 30] + costs[2], dp[day]);
            }
            这里我们不使用如上代码的原因是：因为可能存在最开始买周票会更加便宜
            dp[Math.max(0, day - 7)] + costs[1], 意思是当 day 不超过 7 天的话，
            那么直接表示从 第 1 天开始就买 7 天的票，
            比如：costs = {7,2,15};
             */
            dp[day] = Math.min(
                    dp[day - 1] + costs[0],
                    Math.min(
                            dp[Math.max(0, day - 7)] + costs[1],
                            dp[Math.max(0, day - 30)] + costs[2]
                    )
            );
            idx++;
        }
        return dp[days[len - 1]];
    }
}