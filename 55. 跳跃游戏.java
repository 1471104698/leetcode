/*
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。


输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的
*/
class Solution {
    public boolean canJump(int[] nums) {
        /*
        贪心思想
        我们记录能够跳得最远的距离
        因为存在以下特点：
        当我们从 j 条 4 步到 i 的时候，那么这意味着我们同样能够到达 [j + 1, i - 1] 之间的点 
        因为我们可以选择在 j 跳 3 步到 i - 1，在 j 跳 2 步到 i - 2

        因此，我们只需要记录之前的所有点中，能够跳的最远的距离 k，然后判断是否能够到达当前位置 i
        如果到达不了，表示无论前面怎么跳都到达不了 i，那么就到达不了终点
        */
        int k = 0;
        int len = nums.length;
        for(int i = 0; i < len; i++){
            //前面所有点能够到的最远距离到达不了当前 i 位置，那么返回 false
            if(k < i){
                return false;
            }
            //更新最远距离，判断当前位置起跳，是否能够跳得更远，即能够存在更远的距离
            k = Math.max(k, i + nums[i]);
            //能够跳到的最大距离 到达 或 超过了 终点，那么提前返回 true
            if(k >= len - 1){
                return true;
            }
        }
        return true;
    }
}
