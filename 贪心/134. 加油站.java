在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。

说明: 

如果题目有解，该答案即为唯一答案。
输入数组均为非空数组，且长度相同。
输入数组中的元素均为非负数。
示例 1:

输入: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]

输出: 3

解释:
从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
因此，3 可为起始索引。

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        /*
        0 1 2 3 4 5 6
              i   j

        我们发现，如果 i 最远只能到达 j，并且 j < i
        那么意味着 [i + 1, j] 之间的点都不可能到达 j + 1
        比如 i + 1，如果 从 i + 1 出发能够到达 j + 1，因为 i 能够到达 i + 1，
        那么意味着 i 也能够到达 j + 1，互相矛盾
        同理，如果 j 能够到达 j + 1，那么 i 能够到达 j ，因此 i 也能够到达 j + 1

        因此我们不必考虑 [i + 1, j] 这些点，因为它们永远绕不了一圈重新回到 i
        因为最特殊的情况是 
        0 1 2 3 4 5 6
          j   i
        i 最远能够到达的地方是上述 j ，那么意味着后面的点永远到达不了 j 的下一个位置

        这意味着什么？ 对于后面的 i 值，它们永远不能到达超过 j 的位置，那么就永远不能到达它自身的位置
        因此，我们可以直接返回 -1
        0 1 2 3 4 5 6
          j     i i i
        */

        int len = gas.length;
        for(int i = 0; i < len; i++){
            int j = i;
            int gasSum = gas[i];
            while(gasSum - cost[j] >= 0){
                gasSum -= cost[j];
                j = (j + 1) % len;
                //重新回到 i 位置
                if(j == i){
                    return i;
                }
                gasSum += gas[j];
            }
            //如果当前位置饶了一圈，但是没到达 i ，表示 i 后面的值永远不可能超过 j，因此直接返回 -1
            if(j < i){
                return -1;
            }
            //直接跳到 j + 1，因为 for 会进行 i++，因此令 i = j
            i = j;
        }
        return -1;
    }
}